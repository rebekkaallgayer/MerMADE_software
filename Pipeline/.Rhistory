lm_mod<- lm(log(timeframe$NNests)~timeframe$temp_gap, timeframe)
return(summary(lm_mod)$adj.r.squared)
}
temp_files<- c("aug_sep_data.txt","cirali_temp.txt","espirito_temp.txt")
tests<- c(11, 13, 15) #aug-sep
sims<- c("no fishing", "-2% all stages", "-2% adults", "gradual -2% all stages", "gradual -2% adult")
sims<- c("Sal", "Cirali", "Espirito")
burnin_period<- 200
start_years=c(sal_start, cirali_start, esp_start)
S=-0.0336281
K=0.1
calc_PM2<- function(S, P, K, t){
# sand_t <- t*0.814 +7.872
SR=1/(1+exp((1/S)*(log(P+K)-log(t+K))))
return(SR)
}
#Sal
sal<- read.table("aug_sep_data.txt", header=T)
View(temp_data)
View(gap)
setwd("Postdoc_model/simple_pop_model/spatial_analysis/")
setwd("spatial_analysis/")
S=-0.0336281
K=0.1
calc_PM2<- function(S, P, K, t){
# sand_t <- t*0.814 +7.872
SR=1/(1+exp((1/S)*(log(P+K)-log(t+K))))
return(SR)
}
#Sal
sal<- read.table("aug_sep_data.txt", header=T)
sal_start<- min(sal[,1])
sal_end<- max(sal[,1])
sal_n<- sal_end-sal_start+1
sal_tpiv<- 28.95
calc_PM2(S, sal_tpiv, K, 29.35)
sal_burn<- 29.3
#Cirali
cirali<- read.csv("step_2_mean_cirali.csv")
#write.table(cirali, "cirali_temp.txt", quote=F, sep="\t", row.names=F)
cirali_start<- min(cirali[,1]) #1954
cirali_end<- max(cirali[,1])
cirali_n<- cirali_end-cirali_start +1 #67
cirali_tpiv<- 28.8
calc_PM2(S, cirali_tpiv, K, 29.2)
cir_burn<- 29.2
#Espirito
espirito<- read.csv("step_2_mean_bahia_espirito.csv")
#write.table(espirito, "espirito_temp.txt", quote=F, sep="\t", row.names=F)
esp_start<- min(espirito[,1]) #1948
esp_end<- max(espirito[,1])
esp_n<-esp_end-esp_start +1
esp_tpiv<- 29.2
#calc_PM2(S, esp_tpiv, K, 28.2)
calc_PM2(S, esp_tpiv, K, 29.6)
esp_burn<- 29.6
setwd("../")
##compare air temps and sand temps
# s_y<- c(sal_start,cirali_start,  esp_start)
loc_names<- c("Sal", "Cirali", "Espirito")
temp_files<- c("aug_sep_data.txt","cirali_temp.txt","espirito_temp.txt")
test_nums<- c(11,13,15)
col_loc<- c("red", "blue", "black")
all_temps<-c()
for(loc in 1:3){
temp_data<- read.table(paste("Sims/Test", test_nums[loc], "/Inputs/", temp_files[loc], sep=""), header=T)
temp_data$Sand <- temp_data[,2]*0.95114 +5.2527
temp_data$Location <- rep(loc_names[loc],each=nrow(temp_data))
colnames(temp_data)<- c("Year", "Air_temp", "Sand_temp", "Location")
#temp_data$sand <- temp_data[,2]*0.814 +7.872
if(loc==1){
all_temps<- temp_data
}
else{all_temps<- rbind(all_temps, temp_data)}
}
temp_files<- c("aug_sep_data.txt","cirali_temp.txt","espirito_temp.txt")
tests<- c(11, 13, 15) #aug-sep
sims<- c("no fishing", "-2% all stages", "-2% adults", "gradual -2% all stages", "gradual -2% adult")
sims<- c("Sal", "Cirali", "Espirito")
burnin_period<- 200
start_years=c(sal_start, cirali_start, esp_start)
nreps=10
temp_years=c(sal_n, cirali_n, esp_n)
gap_r2<- function(y, max_years, burnin){ #nyears is now the maximum number of "years before"
first_year=max_years +1
nyears=nrow(temp_data)-first_year
timeframe<- temp_data[first_year: nrow(temp_data),]
timeframe$temp_gap<- temp_data[(first_year-y):(first_year-y+nyears),2]
timeframe$NNests<- pop_data$NNests[(nrow(pop_data)-nyears):nrow(pop_data)]
lm_mod<- lm(log(timeframe$NNests)~timeframe$temp_gap, timeframe)
return(summary(lm_mod)$adj.r.squared)
}
# gap_r2<- function(y, nyears, burnin){
#   first_year=nrow(temp_data)-nyears
#   timeframe<- temp_data[first_year: nrow(temp_data),]
#   timeframe$temp_gap<- temp_data[(first_year-y):(first_year-y+nyears),2]
#   timeframe$NNests<- pop_data$NNests[(nrow(pop_data)-nyears):nrow(pop_data)]
#   lm_mod<- lm(log(timeframe$NNests)~timeframe$temp_gap, timeframe)
#   return(summary(lm_mod)$adj.r.squared)
# }
all_tests<- c()
years_before<- seq(21,45,1)
all_r2<-c()
for(t in 1:length(tests)){
pop_data_all<- read.table(paste("Sims/Test", tests[t], "/Outputs/Population.txt", sep=""), header=T, sep="\t")
temp_data<- read.table(paste("Sims/Test", tests[t], "/Inputs/", temp_files[t], sep=""), header=T)
n_years=burnin_period+temp_years[t]
years<- seq(start_years[t]-burnin_period, start_years[t]+(nrow(temp_data)-1), 1)
#calculate means of everything
#create placeholder
pop_data<- pop_data_all[1:(nrow(pop_data_all)/nreps),-1]
for(y in 0:(n_years-1)){
pop_yr<-pop_data_all[pop_data_all$Year==y,]
pop_data$Year[y+1]=y
#take the average of all columns
for(c in 2:ncol(pop_data)){
pop_data[y+1,c]<- mean(pop_yr[,c+1]) #because pop_yr has one more column
}
}
pop_data$Simulation<- rep(sims[t], n_years)
pop_data$years<- years
if(t==1){
all_tests<- pop_data
}
else{
all_tests<- rbind(all_tests, pop_data)
}
r2_values<- c()
for(y in years_before){
r2_values<- c(r2_values, gap_r2(y, max(years_before), burnin_period))
}
results<- data.frame(cbind(years_before, r2_values, Simulation=rep(sims[t], length(r2_values))))
results$years_before<- as.numeric(results$years_before)
results$r2_values<- as.numeric(results$r2_values)
if(t==1){
all_r2<- results
}
else{
all_r2<- rbind(all_r2, results)
}
}
r2_plot<- ggplot(all_r2, aes(x=years_before,y=r2_values, colour=Simulation))+
geom_line()+
theme_classic() +
xlab("Years Before")+
ylab("Adjusted R2")+
scale_y_continuous(breaks = seq(0,1,by = 0.1), limits=c(-.15,1))+
theme(legend.position=c(0.1, .8))+
scale_colour_manual(values=cbbPalette)
#visualise results
library(ggplot2)
library("gridExtra")
r2_plot<- ggplot(all_r2, aes(x=years_before,y=r2_values, colour=Simulation))+
geom_line()+
theme_classic() +
xlab("Years Before")+
ylab("Adjusted R2")+
scale_y_continuous(breaks = seq(0,1,by = 0.1), limits=c(-.15,1))+
theme(legend.position=c(0.1, .8))+
scale_colour_manual(values=cbbPalette)
# The colour blind friendly palette with black:
cbbPalette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
r2_plot<- ggplot(all_r2, aes(x=years_before,y=r2_values, colour=Simulation))+
geom_line()+
theme_classic() +
xlab("Years Before")+
ylab("Adjusted R2")+
scale_y_continuous(breaks = seq(0,1,by = 0.1), limits=c(-.15,1))+
theme(legend.position=c(0.1, .8))+
scale_colour_manual(values=cbbPalette)
r2_plot
View(all_r2)
temp_file<- "espirito_temp.txt"
temp_data<- read.table(paste("Sims/Test", test_num, "/Inputs/", temp_file, sep=""), header=T)
burnin_period<- 200
nreps=10
#temp_years<- 67 #cirali
temp_years<- 56 #espirito
n_years=burnin_period+temp_years
#start_year<- 1954 #Cirali
start_year<- 1948 #Espirito
gap_r2(31,45,burnin_period)
gap_r2(31,31,burnin_period)
gap_r2<- function(y, max_years, burnin){ #nyears is now the maximum number of "years before"
# first_year=max_years +1
first_year=y +1
nyears=nrow(temp_data)-first_year
timeframe<- temp_data[first_year: nrow(temp_data),]
timeframe$temp_gap<- temp_data[(first_year-y):(first_year-y+nyears),2]
timeframe$NNests<- pop_data$NNests[(nrow(pop_data)-nyears):nrow(pop_data)]
lm_mod<- lm(log(timeframe$NNests)~timeframe$temp_gap, timeframe)
return(summary(lm_mod)$adj.r.squared)
}
all_tests<- c()
years_before<- seq(21,45,1)
all_r2<-c()
for(t in 1:length(tests)){
pop_data_all<- read.table(paste("Sims/Test", tests[t], "/Outputs/Population.txt", sep=""), header=T, sep="\t")
temp_data<- read.table(paste("Sims/Test", tests[t], "/Inputs/", temp_files[t], sep=""), header=T)
n_years=burnin_period+temp_years[t]
years<- seq(start_years[t]-burnin_period, start_years[t]+(nrow(temp_data)-1), 1)
#calculate means of everything
#create placeholder
pop_data<- pop_data_all[1:(nrow(pop_data_all)/nreps),-1]
for(y in 0:(n_years-1)){
pop_yr<-pop_data_all[pop_data_all$Year==y,]
pop_data$Year[y+1]=y
#take the average of all columns
for(c in 2:ncol(pop_data)){
pop_data[y+1,c]<- mean(pop_yr[,c+1]) #because pop_yr has one more column
}
}
pop_data$Simulation<- rep(sims[t], n_years)
pop_data$years<- years
if(t==1){
all_tests<- pop_data
}
else{
all_tests<- rbind(all_tests, pop_data)
}
r2_values<- c()
for(y in years_before){
r2_values<- c(r2_values, gap_r2(y, max(years_before), burnin_period))
}
results<- data.frame(cbind(years_before, r2_values, Simulation=rep(sims[t], length(r2_values))))
results$years_before<- as.numeric(results$years_before)
results$r2_values<- as.numeric(results$r2_values)
if(t==1){
all_r2<- results
}
else{
all_r2<- rbind(all_r2, results)
}
}
View(temp_data)
temp_data<- read.table(paste("Sims/Test", test_num, "/Inputs/", temp_file, sep=""), header=T)
View(temp_data)
nrow(temp_data-45
)
nrow(temp_data)-45
t
temp_files<- c("aug_sep_data.txt","cirali_temp.txt","espirito_temp.txt")
tests<- c(11, 13, 15) #aug-sep
sims<- c("no fishing", "-2% all stages", "-2% adults", "gradual -2% all stages", "gradual -2% adult")
sims<- c("Sal", "Cirali", "Espirito")
burnin_period<- 200
start_years=c(sal_start, cirali_start, esp_start)
nreps=10
temp_years=c(sal_n, cirali_n, esp_n)
gap_r2<- function(y, burnin){ #nyears is now the maximum number of "years before"
# first_year=max_years +1
first_year=y +1
nyears=nrow(temp_data)-first_year
timeframe<- temp_data[first_year: nrow(temp_data),]
timeframe$temp_gap<- temp_data[(first_year-y):(first_year-y+nyears),2]
timeframe$NNests<- pop_data$NNests[(nrow(pop_data)-nyears):nrow(pop_data)]
lm_mod<- lm(log(timeframe$NNests)~timeframe$temp_gap, timeframe)
return(summary(lm_mod)$adj.r.squared)
}
# gap_r2<- function(y, nyears, burnin){
#   first_year=nrow(temp_data)-nyears
#   timeframe<- temp_data[first_year: nrow(temp_data),]
#   timeframe$temp_gap<- temp_data[(first_year-y):(first_year-y+nyears),2]
#   timeframe$NNests<- pop_data$NNests[(nrow(pop_data)-nyears):nrow(pop_data)]
#   lm_mod<- lm(log(timeframe$NNests)~timeframe$temp_gap, timeframe)
#   return(summary(lm_mod)$adj.r.squared)
# }
all_tests<- c()
years_before<- seq(21,45,1)
all_r2<-c()
for(t in 1:length(tests)){
pop_data_all<- read.table(paste("Sims/Test", tests[t], "/Outputs/Population.txt", sep=""), header=T, sep="\t")
temp_data<- read.table(paste("Sims/Test", tests[t], "/Inputs/", temp_files[t], sep=""), header=T)
n_years=burnin_period+temp_years[t]
years<- seq(start_years[t]-burnin_period, start_years[t]+(nrow(temp_data)-1), 1)
#calculate means of everything
#create placeholder
pop_data<- pop_data_all[1:(nrow(pop_data_all)/nreps),-1]
for(y in 0:(n_years-1)){
pop_yr<-pop_data_all[pop_data_all$Year==y,]
pop_data$Year[y+1]=y
#take the average of all columns
for(c in 2:ncol(pop_data)){
pop_data[y+1,c]<- mean(pop_yr[,c+1]) #because pop_yr has one more column
}
}
pop_data$Simulation<- rep(sims[t], n_years)
pop_data$years<- years
if(t==1){
all_tests<- pop_data
}
else{
all_tests<- rbind(all_tests, pop_data)
}
r2_values<- c()
for(y in years_before){
r2_values<- c(r2_values, gap_r2(y, burnin_period))
}
results<- data.frame(cbind(years_before, r2_values, Simulation=rep(sims[t], length(r2_values))))
results$years_before<- as.numeric(results$years_before)
results$r2_values<- as.numeric(results$r2_values)
if(t==1){
all_r2<- results
}
else{
all_r2<- rbind(all_r2, results)
}
}
r2_plot<- ggplot(all_r2, aes(x=years_before,y=r2_values, colour=Simulation))+
geom_line()+
theme_classic() +
xlab("Years Before")+
ylab("Adjusted R2")+
scale_y_continuous(breaks = seq(0,1,by = 0.1), limits=c(-.15,1))+
theme(legend.position=c(0.1, .8))+
scale_colour_manual(values=cbbPalette)
r2_plot
r2_plot<- ggplot(all_r2, aes(x=years_before,y=r2_values, colour=Simulation))+
geom_line()+
theme_classic() +
xlab("Years Before")+
ylab("Adjusted R2")+
scale_y_continuous(breaks = seq(0,1,by = 0.1), limits=c(-.15,1))+
theme(legend.position=c(0.1, .9))+
scale_colour_manual(values=cbbPalette)
r2_plot
#libraries
library(raster)
library(rgl)
library(igraph)
#set your working directory
setwd("C:/Users/Rey/Documents/MerMADE/Pipeline/") #!!! this is the filepath to the Pipeline folder, so change this to wherever you have that folder saved
#to use this on your own files, change it to where you have your Simulation folders saved
#!!! Change this to FALSE if you are NOT running a patch-based model
patch_based=FALSE
#read in the .txt file for habitat types in your seascape
#this is the file with 1,2,3 etc for each cell of your seascape
#remember that habitat type 0 is always water!
habs<- read.table("Data/hab_types.txt") #!!!if your file is called something else, change this
#IF YOU ARE RUNNING A PATCH BASED MODEL
#read in the .txt file for patch designations in your seascape
#there should be -9999 in the cells that are not part of a patch
if(patch_based==T){
patches<- read.table("Data/patches.txt") #!!! if your patch designation file is called something else, change this
}
#read in the seafloor depth data
sfd<- read.table("Data/sf_depth.txt") #!!! if your seafloor depth file is called something else, change this
suitable_habs<-c(1) #!!! you need to add all the habitat types that are suitable and could be part of patches
for(r in 1:nrow(habs)){
for(c in 1:ncol(habs)){
if(patches[r,c]!=-9999 && is.na(match(habs[r,c], suitable_habs))){ #if there's a patch designation but it's not suitable
print(paste("there is a mismatch at ", r, ", ", c, sep=""))
}
}
}
#to use this on your own files, change it to where you have your Simulation folders saved
#!!! Change this to FALSE if you are NOT running a patch-based model
patch_based=TRUE
#IF YOU ARE RUNNING A PATCH BASED MODEL
#read in the .txt file for patch designations in your seascape
#there should be -9999 in the cells that are not part of a patch
if(patch_based==T){
patches<- read.table("Data/patches.txt") #!!! if your patch designation file is called something else, change this
}
#so this might look like c(1,2,5) for example
if(patch_based==T){
for(r in 1:nrow(habs)){
for(c in 1:ncol(habs)){
if(patches[r,c]!=-9999 && is.na(match(habs[r,c], suitable_habs))){ #if there's a patch designation but it's not suitable
print(paste("there is a mismatch at ", r, ", ", c, sep=""))
}
}
}
}
#visualise your landscape in 2D
#seascape parameters (needed for mapping)
#!!!
res=1500 #resolution in metres
min_x=428430 #this is the minimum x coordinate IN METRES!
min_y=6123500 #this is the minimum y coordinate IN METRES!
nr=245 #number of rows
nc=198 #number of columns
#plot the seascape on a 2D map
max_y=min_y+(res*nr)
max_x=min_x+(res*nc)
hab_ras<- raster(as.matrix(habs))
extent(hab_ras)<- c(min_x, max_x, min_y, max_y)
nhabs <- c(0,unique(hab_ras)[-1])
plot(hab_ras, breaks=nhabs, col=terrain.colors(length(nhabs)+1),legend=F)
plot(hab_ras, breaks=nhabs, col=terrain.colors(length(nhabs)+1),legend=F)
plot(hab_ras, breaks=nhabs, col=terrain.colors(length(nhabs)+1),legend=F)
plot(hab_ras, breaks=nhabs, col=terrain.colors(length(nhabs)+1),legend=F)
plot(hab_ras, breaks=nhabs, col=terrain.colors(length(nhabs)+1),legend=F)
plot(hab_ras, breaks=nhabs, col=terrain.colors(length(nhabs)+1),legend=F)
dev.off()
plot(hab_ras, breaks=nhabs, col=terrain.colors(length(nhabs)+1),legend=F)
#figure out sfd's layers first
depth_layers=sfd #this will hold info on which layer it sits in
depth_interval=10 #!!! change this to the interval you are using in metres!
#because of the method of interpolation of hydrodynamic layers in MATLAB,
#there might be depth measurements even where there is land
land_type<- 2 #!!! change this value to whichever habitat type you have assigned to land!
for( r in 1:nrow(sfd)){
for(c in 1:ncol(sfd)){
if(habs[r,c]==land_type){ #if that cell is actually land
depth_layers[r,c]=0 #make the depth 0
next
}
la=floor(sfd[r,c]/depth_interval)
#i want to assign habitat based on nearest to depth interval, so if seafloor depth is 29m, i dont want to block out the entire 20-30m depth layer
half_depth=(la*depth_interval)+depth_interval/2; #min depth+half the interval
if(sfd[r,c]>= half_depth){ #if the seafloor depth is deeper than half-depth
#for example, if sfd=26, i want the 20-30interval to be water
depth_layers[r,c]=la+1 #the value will belong to the next layer
}
else{
#ie sfd=22, then i want the 20-30 interval to be solid
depth_layers[r,c]=la
}
}
}
seafloor=2; #!!! designate a hab type for seafloor/land (this can be the same type as unsuitable if you dont want your indivs to settle there)
max_depth=90 #!!! change this to whatever maximum depth you want to model to!
max_lay = (max_depth/depth_interval)-1
for(la in 0:max_lay){
copy_h=habs
copy_p=patches
for(r in 1:nrow(sfd)){
for(c in 1:ncol(sfd)){
if(la >= depth_layers[r,c]){ #if it should be solid
if(habs[r,c]==-9999){#but there is no designation
copy_h[r,c]=seafloor;
copy_p[r,c]=-9999; #unsuitable hab, outside of patch
}
else{#otherwise make it that habitat/patch
#since copy_h and copy_p are already copies, they already hold the hab and patch values
#dont need to do anything here
}
}
else{
copy_h[r,c]=0; #otherwise, give it water because it's above the seafloor
copy_p[r,c]=-9999; #since it's water, there is no patch designation
}
}
}
#!!! change the filenames to wherever  you want them to save. Replace "Sims/Test1/"
#with whichever folder you want
#Keep the "Inputs/hab_" part!
write.table(copy_h, file=paste("Sims/Test1/Inputs/hab_", la, ".txt", sep=""), row.names=F, col.names=F)
write.table(copy_p, file=paste("Sims/Test1/Inputs/patch_", la, ".txt", sep=""), row.names=F, col.names=F)
print(paste("done with layer ", la, sep=""))
}
n_layers=9 #how many layer files do you have?
min_depth=0 #surface=0, otherwise which minimum depth to plot from
dint=10 #depth interval in metres
res=1500 #resolution in metres
min_x=428430 #this is the minimum x coordinate IN METRES!
min_y=6123500 #this is the minimum y coordinate IN METRES!
nr=245 #number of rows
nc=198 #number of columns
dir= "C:/Users/Rey/Documents/MerMADE/Pipeline/Sims/Test" #this is where you have the data saved, in the Inputs folder of a simulation
test_num=1 #if you have set up your sims as Test1, Test2 etc, this lets you loop over the sim folders
usrm<- par3d()$userMatrix
plot_results<- function(dir, test_num, n_layers, min_depth, dint, res, min_x, min_y, nr, nc, usrmatrix){
max_depth=-1* (min_depth + n_layers*dint)
layer_names<-unlist(read.table(paste(dir, test_num, "/Inputs/hab_layers.txt", sep="")), use.names=F)
layers<- read.table(paste(dir, test_num, "/Inputs/", layer_names[1], sep=""))
layers<- layers[1:nr, 1:nc]
for(r in 1:nrow(layers)){
for(c in 1:ncol(layers)){
if(layers[r,c]>0){layers[r,c]=1}
}
}
for(la in 2:(n_layers)){
layer<- read.table(paste(dir, test_num, "/Inputs/", layer_names[la], sep=""))
layer<- layer[1:nr, 1:nc]
for(r in 1:nrow(layer)){
for(c in 1:ncol(layer)){
if(layer[r,c]>0){layer[r,c]=1}
}
}
layers<-layers+layer
}
surface_test<- matrix(nrow=nrow(layers), ncol=ncol(layers))
for(r in 1:nrow(layers)){
for(c in 1: ncol(layers)){
surface_test[r,c]=max_depth+(layers[r,c]*dint) #it's + because everything is on a negative axis
}
}
surface_test<- as.matrix(surface_test)
mx_vals<- seq(min_x+res,(min_x+res*nc),res)
mx<- matrix(nrow=nrow(surface_test), ncol=ncol(surface_test))
my_vals<- seq((min_y+nr*res),min_y+res,(-1*res))
my<-matrix(nrow=nrow(surface_test), ncol=ncol(surface_test))
for(i in 1:length(my_vals)){
mx[i,]<- mx_vals
}
for(i in 1:length(mx_vals)){
my[,i]<- my_vals
}
open3d()
plot3d(0, 0, 0, type="l", xlab="x", ylab="y", zlab="z", xlim=c(min_x,min_x+res*nr), ylim=c(min_y,min_y+res*nr), zlim=c(min_depth,max_depth))
z=surface_test
surface_layer=surface_test
colorlut <- terrain.colors(max(z)-min(z) +1) # height color lookup table
col <- colorlut[ z - min(z) + 1 ] # assign colors to heights for each point
surface3d(x=mx, y=my, z=surface_test, color=col)
aspect3d(1,1,.08)
view3d(userMatrix=usrm, zoom=.5) #zoom 0.5 is a good value for seeing it not from above
}
#plot your 3D landscape
plot_results(dir, test_num, n_layers, min_depth, dint, res, min_x, min_y, nr, nc, usrmatrix)
